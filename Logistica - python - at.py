# -*- coding: utf-8 -*-
"""BARBARACRISTINA_COSTA_DR2_AT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z7UWt6U5Lx7WqIUyRshu-k99vAOQgBej
"""

# Função para cadastrar um novo produto  - item 1


def cadastrar_produto(estoque, descricao, codigo, quantidade, custo, preco_venda):
    """
    Cadastra um novo produto no estoque e Verifica se o código do produto já existe

    """
    produto = buscar_por_codigo(estoque, codigo)
    if produto:
        print(f"Produto com código {codigo} já cadastrado.")
        return

    novo_produto = {
        "descricao": descricao.strip(),
        "codigo": int(codigo),
        "quantidade": int(quantidade),
        "custo": float(custo),
        "preco_venda": float(preco_venda)
    }
    estoque.append(novo_produto)
    print(f"Produto {descricao} cadastrado com sucesso!")

# Função para carregar o estoque inicial a partir da string fornecida - item 2

def carregar_estoque(dados_estoque):
    """
    Carrega o estoque a partir de uma string.
    Args: dados_estoque (str): String com os produtos separados por #.
    Returns:
        list: Estoque carregado.
    """
    estoque = []
    produtos = dados_estoque.split("#")

    for produto in produtos:
        dados_produto = produto.split(";")

        descricao = dados_produto[0]
        codigo = dados_produto[1]
        quantidade = dados_produto[2]
        custo = dados_produto[3]
        preco_venda = dados_produto[4]

        cadastrar_produto(estoque, descricao, codigo, quantidade, custo, preco_venda)

    return estoque

#Listar produtos - item 3

def listar_estoque(estoque):
    """
    Listar todos os produtos em estoque
    """
    for produto in estoque:
        print('\n')
        print(f'Descrição: {produto.get("descricao")}')
        print(f'Código: {produto.get("codigo")}')
        print(f'Quantidade: {produto.get("quantidade")}')
        print(f'Custo: R$ {produto.get("custo")}')
        print(f'Preço de Venda: R$ {produto.get("preco_venda")}')
        print('\n')
        print("-" * 30)

#Ordernar Produtos - item 4

def ordernar_por_quantidade(estoque, desc):
    """
    Ordena o estoque pela quantidade.
    Args: estoque (list): Lista de produtos.
          desc (bool): Decrescente (True) ou crescente (False).
    """
    estoque.sort(key=lambda x: x["quantidade"], reverse=desc)
    listar_estoque(estoque)

# Menu interativo - item 5

def menu():
    """
    Exibe o menu principal e gerencia as opções do usuário.
    """
    estoque = []  # Inicializa o estoque
    estoque_inicial = "Notebook Dell;201;15;3200.00;4500.00#Notebook Lenovo;202;10;2800.00;4200.00#Mouse Logitech;203;50;70.00;150.00#Mouse Razer;204;40;120.00;250.00#Monitor Samsung;205;10;800.00;1200.00#Monitor LG;206;8;750.00;1150.00#Teclado Mecânico Corsair;207;30;180.00;300.00#Teclado Mecânico Razer;208;25;200.00;350.00#Impressora HP;209;5;400.00;650.00#Impressora Epson;210;3;450.00;700.00#Monitor Dell;211;12;850.00;1250.00#Monitor AOC;212;7;700.00;1100.00"

    # Carregar o estoque inicial
    estoque = carregar_estoque(estoque_inicial)

    while True:
        print("\n=== Menu ===")
        print("1. Cadastro de produto")
        print("2. Listagem de produtos")
        print("3. Ordenação de produtos por quantidade")
        print("4. Busca de produtos")
        print("5. Remover produto")
        print("6. Consulta de produtos esgotados")
        print("7. Filtro de produtos com baixa quantidade")
        print("8. Atualização de estoque")
        print("9. Atualização de preços")
        print("10. Calcular valor total do estoque")
        print("11. Cálculo do lucro presumido")
        print("12. Relatório geral do estoque")
        print("0. Sair")

        opcao = input("Escolha uma opção (0-12): ")

        if opcao == "1":
            descricao = input("Descrição do produto: ")
            codigo = int(input("Código do produto: "))
            if codigo < 0:
                print("Erro: valor invalido")
                continue
            quantidade = int(input("Quantidade: "))
            if quantidade < 0:
                print("Erro: valor invalido")
                continue
            custo = float(input("Custo: "))
            if custo < 0:
                print("Erro: valor invalido")
                continue
            preco_venda = float(input("Preço de venda: "))
            if preco_venda < 0:
                print("Erro: valor invalido")
                continue
            cadastrar_produto(estoque, descricao, codigo, quantidade, custo, preco_venda)

        elif opcao == "2":
            listar_estoque(estoque)

        elif opcao == "3":
            ordem = input("Ordenar por quantidade (crescente ou decrescente)? ").strip().lower()
            if ordem == "crescente":
                ordernar_por_quantidade(estoque, False)  # False para crescente
                print("Estoque ordenado por quantidade em ordem crescente.")
            elif ordem == "decrescente":
                ordernar_por_quantidade(estoque, True)  # True para decrescente
                print("Estoque ordenado por quantidade em ordem decrescente.")
            else:
                print("Opção inválida. Use 'crescente' ou 'decrescente'.")

        elif opcao == "4":
            codigo = int(input("Informe o código do produto: "))
            buscar_produto(estoque, codigo=codigo)

        elif opcao == "5":
            codigo = int(input("Informe o código do produto a ser removido: "))
            remover_produto(estoque, codigo)

        elif opcao == "6":
            buscar_produtos_sem_estoque(estoque)

        elif opcao == "7":
            quantidade_minima = int(input("Informe a quantidade mínima: "))
            buscar_produtos_abaixo_da_quantidade_minima(estoque, quantidade_minima)

        elif opcao == "8":
            codigo = int(input("Informe o código do produto: "))
            acao = input("Deseja aumentar ou diminuir a quantidade? (a/d): ").strip().lower()
            quantidade = int(input("Quantidade: "))

            if acao == 'a':
                atualizar_quantidade_produto(estoque, codigo, quantidade, adicionar=True)
            elif acao == 'd':
                atualizar_quantidade_produto(estoque, codigo, quantidade, adicionar=False)
            else:
                print("Opção inválida. Escolha 'a' para aumentar ou 'd' para diminuir.")

        elif opcao == "9":
            codigo = int(input("Informe o código do produto: "))
            novo_preco = float(input("Novo preço de venda: "))
            alterar_preco_venda(estoque, codigo, novo_preco)

        elif opcao == "10":
            calcular_valor_total_estoque(estoque)

        elif opcao == "11":
            calcular_lucro_presumido(estoque)

        elif opcao == "12":
            relatorio_geral_estoque(estoque)

        elif opcao == "0":
            print("Saindo do sistema...")
            break

        else:
            print("Opção inválida. Tente novamente.")

#função para buscar produtos- item 6

def buscar_produto(estoque, *, descricao=None, codigo=None):
    """
    Busca produtos pelo nome ou código.
    Args: estoque (list): Lista de produtos.
          descricao (str): Descrição do produto.
          codigo (int): Código do produto.
    """
    # Lista para armazenar produtos encontrados
    produtos_encontrados = []

    for produto in estoque:
        descricaoIgual = descricao is not None and descricao.lower() == produto["descricao"].lower()
        codigoIgual = codigo is not None and codigo == produto["codigo"]

        if descricaoIgual or codigoIgual:
            produtos_encontrados.append(produto)

    exibir_produtos(produtos_encontrados)

# Função para remover produtos - item 7

def remover_produto(estoque, codigo):
    """
    Remove um produto pelo código.
    Args: estoque (list): Lista de produtos.
          codigo (int): Código do produto.
    """
    produto = buscar_por_codigo(estoque, codigo)
    if produto:
        estoque.remove(produto)
        print(f"Produto com código {codigo} removido com sucesso!")

#Função para buscar produtos sem estoque - item 8


def buscar_produtos_sem_estoque(estoque):
    """
    Busca produtos sem estoque
    """
    produtos_encontrados = []

    for produto in estoque:
        if produto["quantidade"] == 0:
            produtos_encontrados.append(produto)

    exibir_produtos(produtos_encontrados, "*** Produtos sem estoque ***")

#Função para produtos com quantidade minima - item 9


def buscar_produtos_abaixo_da_quantidade_minima(estoque, quantidade_minima = 5):
    """
    Busca produtos com quantidade abaixo da mínima.
    Args: estoque (list): Lista de produtos.
          quantidade_minima (int): Quantidade mínima.
    """
    produtos_encontrados = []

    for produto in estoque:
        if produto["quantidade"] < quantidade_minima:
            produtos_encontrados.append(produto)

    exibir_produtos(produtos_encontrados, '*** Produtos com quantidade abaixo da mínima: ***')

# Função para atualizar e validar quantidade de produtos - item 10

def atualizar_quantidade_produto(estoque, codigo, quantidade, adicionar = True):
    """
    atualiza a quantidade de um produto.
    """
    if quantidade < 0:
       print("Erro: valor inválido")
       return

    produto = buscar_por_codigo(estoque, codigo)
    if produto:
        if adicionar:
            produto["quantidade"] += quantidade
        else:
            if quantidade > produto["quantidade"]:
              print("O estoque não pode ser negativo.")
              return
            produto["quantidade"] -= quantidade

        print(f'Estoque do produto {produto["descricao"]} atualizado para {produto["quantidade"]}.')

#Alterar preço de venda - item 11

def alterar_preco_venda(estoque, codigo, novo_preco):
    """
    Altera o preço de venda de um produto.
    Args: estoque (list): Lista de produtos.
          codigo (int): Código do produto.
          novo_preco (float): Novo preço de venda.
    """
    if novo_preco < 0:
        print("O preço de venda não pode ser negativo.")
        return

    produto = buscar_por_codigo(estoque, codigo)
    if produto:
        # Verifica se o novo preço é menor que o custo
        if novo_preco < produto["custo"]:
            print("O preço de venda não pode ser menor que o custo.")
            return
        produto["preco_venda"] = novo_preco
        print(f"Preço de venda do produto {produto['descricao']} atualizado para R$ {novo_preco:.2f}.")

#item 12
# feito nas questoes 10 e 11

#Valor Total do estoque - item 13

def calcular_valor_total_estoque(estoque):
    """
    Calcula e exibe o valor total do estoque.
    Args: estoque (list): Lista de produtos no estoque.
    """
    valor_total = 0
    for produto in estoque:
        valor_total += produto["quantidade"] * produto["preco_venda"]

    print(f"Valor total do estoque: R$ {valor_total:.2f}")

#Lucro Presumido - item 14

def calcular_lucro_presumido(estoque):
    """
    Calcula e exibe o lucro presumido total do estoque.
    Args: estoque (list): Lista de produtos no estoque.
    """
    lucro_total = 0.0  # Inicializa o lucro total

    for produto in estoque:
        # Calcula o lucro para cada produto
        lucro_por_produto = (produto["preco_venda"] - produto["custo"]) * produto["quantidade"]
        lucro_total += lucro_por_produto

    # Exibe o lucro total do estoque
    print(f"Lucro presumido total do estoque: R$ {lucro_total:.2f}")

#item 16

def relatorio_geral_estoque(estoque):
    """
    Gera e exibe um relatório geral do estoque, incluindo custo total e faturamento total.
    Args: estoque (list): Lista de produtos no estoque.
    """
    # Inicializa variáveis para custo total e faturamento total
    custo_total = 0.0
    faturamento_total = 0.0

    print("\n=== Relatório Geral do Estoque ===")
    print("Descrição".ljust(30) + "Código".ljust(10) + "Quantidade".ljust(10) +
          "Custo".ljust(10) + "Preço".ljust(10) + "Valor Total".ljust(10))
    print("=" * 80)

    for produto in estoque:
        descricao = produto["descricao"]
        codigo = produto["codigo"]
        quantidade = produto["quantidade"]
        custo = produto["custo"]
        preco_venda = produto["preco_venda"]

        valor_total = quantidade * preco_venda

        # Acumula custo total e faturamento total
        custo_total += quantidade * custo
        faturamento_total += valor_total

        # Imprime cada linha do relatório usando ljust para formatar
        print(descricao.ljust(30) + str(codigo).ljust(10) +
              str(quantidade).ljust(10) + f"R$ {custo:.2f}".ljust(10) +
              f"R$ {preco_venda:.2f}".ljust(10) + f"R$ {valor_total:.2f}".ljust(10))

    print("=" * 80)
    print("Custo Total:".ljust(30) + f"R$ {custo_total:.2f}".rjust(50))
    print("Faturamento Total:".ljust(30) + f"R$ {faturamento_total:.2f}".rjust(50))
    print("=" * 80)



# funcoes auxiliares - criadas para evitar repetições desnecessarias durante o codigo.

    """
    Busca um produto pelo código no estoque.
    Args: estoque (list): Lista de produtos no estoque.
          codigo (int): Código do produto.
    Returns:
        dict: Produto encontrado ou None se não encontrado.
    """
def buscar_por_codigo(estoque, codigo):
    for produto in estoque:
        if produto["codigo"] == codigo:
            return produto
    return


def exibir_produtos(produtos, mensagem = '**** Produtos ***'):
    """
    Exibe uma lista de produtos com uma mensagem de cabeçalho.
    """
    if produtos:
        print('\n' + mensagem)
        for produto in produtos:
          exibir_produto(produto)
    else:
        print("Nenhum produto encontrado.")

def exibir_produto(produto):
    """
    Exibe as informações detalhadas de um produto.
    """
    print(f"Descrição: {produto['descricao']}")
    print(f"Código: {produto['codigo']}")
    print(f"Quantidade: {produto['quantidade']}")
    print(f"Custo: R$ {produto['custo']:.2f}")
    print(f"Preço de Venda: R$ {produto['preco_venda']:.2f}")
    print('\n')
    print("-" * 30)

menu()